#!/usr/bin/env bash

set -o nounset
ceol=`tput el`

declare -A install_list

! [[ ${HOME:-} ]] && export HOME=/root

lockfile="/var/lock/subsys/setup_packages.lockfile"
. /opt/kazoo_install/setup_common

trap error_exit SIGHUP SIGTERM ERR EXIT
trap int_exit SIGINT SIGQUIT

dir="/opt/kazoo_install/"

#flag used to determine if all in one profile should be used. 
all_in_one=""


# run_cmd uses references to the name _dbg _cmd _error
# define all commands, debug print statments and errors here. 

#
# Questions for setting up admin account
#

admin_user=""
admin_user_question="Please enter the user name for the ${red}admin${blue} account on your Kazoo system: "
admin_user_re="$name_regex"
admin_user_hint="This is the user you will use to administer Kazoo."
admin_user_ref="admin_user"

admin_password=""
admin_password_question="Please enter the ${red}password${blue} for the ${yellow}admin${blue} account on your Kazoo system: "
admin_password_re=".*"
admin_password_hint="This is the password for the administer Kazoo account. "
admin_password_ref="admin_password"


admin_account=""
admin_account_question="Please enter the ${red}account name${blue} for the ${yellow}admin${blue} account on your Kazoo system: "
admin_account_re="$name_regex"
admin_account_hint="This is the main account name you will use administer Kazoo."
admin_account_ref="admin_account"

#
# restart commands 
#

restart_epmd_dbg="Start EPMD with: ${NC} /usr/bin/epmd -daemon"
restart_epmd_cmd="/usr/bin/epmd -daemon"
restart_epmd_error="epmd daemon failed to start, start with: ${NC}/usr/bin/epmd -daemon"

restart_freeswitch_cmd="/sbin/service freeswitch restart"
restart_freeswitch_dbg="Restart FreeSWITCH with: ${NC}service freeswitch restart"
restart_freeswitch_error="Freeswitch restart failed, restart with: ${NC}service freeswitch restart"

restart_bigcouch_cmd="/sbin/service bigcouch restart"
restart_bigcouch_dbg="Restart Bigcouch to apply changes with: ${NC}service bigcouch restart"
restart_bigcouch_error="Bigcouch restart failed, restart with: ${NC}/sbin/service bigcouch restart"

restart_kamailio_dbg="Restart Kamailio to apply the changes with: ${NC}service kamailio restart"
restart_kamailio_cmd="/sbin/service kamailio restart"
restart_kamailio_error="Kamailio restart failed, restart with: ${NC}service kamailio restart"

restart_rabbitmq_dbg="Restart RabbitMQ with: ${NC} service rabbitmq-server restart"
restart_rabbitmq_cmd="/sbin/service rabbitmq-server restart" 
restart_rabbitmq_error="Rabbitqm restart failed, restart with:  ${NC}service rabbitmq-server restart"

#KZ-WHISTLE_APPS RESTART
restart_whistle_apps_dbg="Restarting Whapps with: ${NC}service kz-whistle_apps restart"
restart_whistle_apps_cmd="/sbin/service kz-whistle_apps restart" 
restart_whistle_apps_error="kz-whistle_apps restart failed, restart with: ${NC}service kz-whistle_apps restart" 

#KZ-ECALLMGR RESTART 
restart_ecallmgr_dbg="Restarting ecallmgr with: ${NC}service kz-ecallmgr restart"
restart_ecallmgr_cmd="/sbin/service kz-ecallmgr restart" 
restart_ecallmgr_error="kz-ecallmgr restart failed, restart with: ${NC}service kz-ecallmgr restart"

#RESTART HTTPD
restart_httpd_dbg="Starting httpd with: ${NC}service httpd restart"
restart_httpd_cmd="/sbin/service httpd restart"
restart_httpd_error="httpd restart failed, restart with: ${NC}service httpd restart"

#restart rsyslog
restart_rsyslog_dbg="Restart rsyslog with: ${NC}service rsyslog restart"
restart_rsyslog_cmd="/sbin/service rsyslog restart"
restart_rsyslog_error="rsyslog failed to start, restart with: ${NC}service rsyslog restart"

#restart haproxy
restart_haproxy_dbg="Restart HAProxy to apply changes with: ${NC}service haproxy restart"
restart_haproxy_cmd="/sbin/service haproxy restart"
restart_haproxy_error="haproxy restart failed, restart with: ${NC}service haproxy restart"


#
# Enable services on boot
#

boot_rabbitmq_dbg="Enabling rabbitmq on boot with: ${NC}chkconfig rabbitmq-server on"
boot_rabbitmq_cmd="chkconfig rabbitmq-server on"
boot_rabbitmq_error="Failed to enable rabbitmq chkconfig"

boot_whistle_apps_dbg="Enabling kz-whistle_apps on boot with: ${NC}chkconfig kz-whistle_apps on" 
boot_whistle_apps_cmd="chkconfig kz-whistle_apps on"   
boot_whistle_apps_error="Failed to enable rabbitmq-server to chkconfig"
        
boot_ecallmgr_dbg="Enabling ecallmgr on boot with: ${NC}chkconfig kz-ecallmgr on"        
boot_ecallmgr_cmd="chkconfig kz-ecallmgr on"
boot_ecallmgr_error="Failed to enable rabbitmq-to chkconfig"

boot_bigcouch_dbg="Enabling bigcouch on boot with: ${NC}chkconfig bigcouch on"
boot_bigcouch_cmd="chkconfig bigcouch on"
boot_bigcouch_error="Failed to enable bigcouch in chkconfig"

boot_freeswitch_dbg="Enabling freeswithc on boot with: ${NC}chkconfig freeswitch on" 
boot_freeswitch_cmd="chkconfig freeswitch on" 
boot_freeswitch_error="Failed to enable freeswitch in chkconfig"

boot_kamailio_dbg="Enabling kamailio on boot with: ${NC}chkconfig kamailio on"
boot_kamailio_cmd="chkconfig kamailio on"
boot_kamailio_error="Failed to enable kamailio in chkconfig"

boot_haproxy_dbg="Enabling haproxy on boot with: ${NC}chkconfig haproxy on"
boot_haproxy_cmd="chkconfig haproxy on"
boot_haproxy_error="Failed to enable haproxy in chkconfig"

boot_httpd_dbg="Enabling kamailio on boot with: ${NC}chkconfig httpd on"
boot_httpd_cmd="chkconfig httpd on"
boot_httpd_error="Failed to enable httpd in chkconfig"

#
#setup commands to get services configured
#

symlink_haproxy_dbg="Creating symlink to use HA proxy config in /etc/kazoo/haproxy instead of /etc/haproxy"
symlink_haproxy_cmd="rm -rf /etc/haproxy/haproxy.cfg;ln -s /etc/kazoo/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg"
symlink_haproxy_error="create symlink failed,  create with: ${NC}ln -s /etc/kazoo/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg" 

attach_ecallmgr_dbg="Attach ecallmgr to FreeSWITCH with: ${NC} sup -n ecallmgr ecallmgr_maintenance add_fs_node freeswitch@TOKEN"
attach_ecallmgr_cmd="/opt/kazoo/utils/sup/sup -n ecallmgr ecallmgr_maintenance add_fs_node freeswitch@TOKEN"
attach_ecallmgr_error="Attach ecallmgr failed, rerun with: ${NC}sup -n ecallmgr ecallmgr_maintenance add_fs_node freeswitch@TOKEN"

update_bigcouch_views_dbg="Updating all Bigcouch views with: ${NC}sup whapps_maintenance migrate"
update_bigcouch_views_cmd="/opt/kazoo/utils/sup/sup whapps_maintenance migrate"
update_bigcouch_views_error="whapps blocking_refresh failed! rerun with: ${NC}sup whapps_maintenance migrate"

if [ -d /opt/kazoo/system_media/en-us ]; then  
    media_dir="/opt/kazoo/system_media/en-us"
else 
    media_dir="/opt/kazoo/system_media"
fi

import_media_files_dbg="Importing media files with: ${NC}sup whistle_media_maintenance import_prompts ${media_dir} en-us "
import_media_files_cmd="sup whistle_media_maintenance import_prompts ${media_dir} en-us"
import_media_files_error="Media prompt import failed with: ${NC}sup whistle_media_maintenance import_prompts ${media_dir} en-us"

create_account_dbg="Creating admin account with: ${NC}sup crossbar_maintenance create_account TOKEN"
create_account_cmd="/opt/kazoo/utils/sup/sup crossbar_maintenance create_account TOKEN"
create_account_error="Account creation failed, you can create an account with: ${NC}sup crossbar_maintenance create_account TOKEN"

handle_args(){

    while getopts "ai:" opt;do
        case $opt in
            i)
                dbg "Installer requested setup of package $OPTARG"
                install_list["$OPTARG"]=1
                ;;
            a)
                dbg "All in one selected, setting up all services."
                all_in_one=1
                ;;
        esac
    done

}

do_setup(){
    for package in ${!install_list[@]}; do
        package_setup="${dir}setup_${package}"

        dbg "Running setup script: ${NC} $package_setup ${green}for package:${NC} $package"
 
        if [[ -n $all_in_one ]]; then 
            $package_setup -a || error_exit "package setup failed for $package in script: ${NC}$package_setup"
        else
            $package_setup || error_exit "package setup failed for $package in script: ${NC}$package_setup"
        fi
    done
}

ask_account_info(){
    answer=""

    [[ ${all_in_one:-} ]] || 
        confirm "Do you want to configure the admin account and import media? (NOTE: only do this if this is the LAST apps server you are installing) [y|n]? "

    if [[ $answer =~ ^[yY] || ${all_in_one:-} ]]; then
        ask admin_user
        ask admin_password 
        ask admin_account
        set_info_file
    fi
}
 
check_root
check_lock

handle_args $@

    echo

system_ip_address=""; check_ip || ask_ip_selection
system_hostname=""; get_system_hostname
admin_realm="sip.${system_hostname}"

#auto generate Erlang cookie on all-in-one installs
if [[ ${all_in_one:-} ]];then 
    generate_erlang_cookie
else 
    get_default_cookie 
fi

#ask for account info if kazoo installed
if [[ ${install_list[kazoo]:-} ]]; then
    check_info_file 
    ! [[ ${admin_user:-} ]] || ! [[ ${admin_password:-} ]] || ! [[ ${admin_account:-} ]] && ask_account_info

    if [[ ${all_in_one:-} ]]; then
        run_rabbit=1
    else 
        answer=""
        confirm "do you want to run this server as an AMQP broker? [y|n] "
        if [[ $answer =~ ^[yY] ]]; then 
            run_rabbit=1
        fi
    fi  
fi 

#account string to use in install
account_string="\"$admin_account\" \"$admin_realm\" \"$admin_user\" \"$admin_password\""

do_setup

info " : Restarting services : "


#TODO: SETUP BASIC IP TABLES ENTRIES PER SERVICE!!!!!!
warn "WARNING:  Stopping IP tables, that means your shields are down!"
warn "          You should setup some firewall rules, before you are haxored!!"
service iptables stop 
chkconfig iptables off 


run_cmd 'restart_rsyslog'

if  [[ ${install_list['haproxy']:-} ]]; then
    run_cmd 'symlink_haproxy'
    run_cmd 'restart_haproxy'  
fi 

[[ ${install_list['freeswitch']:-} ]] && run_cmd 'restart_epmd'
[[ ${install_list['bigcouch']:-}   ]] && run_cmd 'restart_bigcouch'
[[ ${install_list['kazoo']:-} && ${run_rabbit:-}  ]] && run_cmd 'restart_rabbitmq'

sleep 5

[[ ${install_list['freeswitch']:-} ]] && run_cmd 'restart_freeswitch' 
[[ ${install_list['kamailio']:-}   ]] && run_cmd 'restart_kamailio' 

if [[ ${install_list['kazoo']:-} ]];then 
    run_cmd 'restart_whistle_apps'
    run_cmd 'restart_ecallmgr'
    wait_apps_running
    
    dbg "Displaying whistle_apps status with: ${NC}service kz-whistle_apps status "
    /sbin/service kz-whistle_apps status 
fi  

if [[ ${install_list['freeswitch']:-} &&  ${install_list['kazoo']:-} ]];then 
    run_cmd 'attach_ecallmgr' $system_hostname
elif [[ ${install_list['freeswitch']:-} ]];then
    info "Attach this FreeSWITCH to your cluster from any apps sever by running: ${NC}sup -n ecallmgr ecallmgr_maintenance add_fs_node freeswitch@${system_hostname}" 
fi 

[[ ${install_list['kazoo-ui']:-} ]] && run_cmd 'restart_httpd' 

if [[ ${install_list['kazoo']:-} ]];then
    [[ ${run_rabbit:-} ]] && run_cmd 'boot_rabbitmq'
    run_cmd 'boot_whistle_apps' 
    run_cmd 'boot_ecallmgr' 
fi  

[[ ${install_list['freeswitch']:-} ]] && run_cmd 'boot_freeswitch'
[[ ${install_list['kamailio']:-}   ]] && run_cmd 'boot_kamailio'
[[ ${install_list['bigcouch']:-}   ]] && run_cmd 'boot_bigcouch'
[[ ${install_list['haproxy']:-}    ]] && run_cmd 'boot_haproxy'
[[ ${install_list['kazoo-ui']:-}   ]] && run_cmd 'boot_httpd'

if [[ ${all_in_one:-} ]];then
   
   echo "/opt/kazoo_install/kazoo_motd" >> /root/.bashrc

   dbg "adding on-boot script to support all in one systems"
   
   echo "/opt/kazoo_install/onboot_kazoo" >> /etc/rc.d/rc.local
fi



if [[ ${install_list['kazoo']:-} ]];then 
    
    if [[ ${admin_user:-} ]]; then
        run_cmd 'update_bigcouch_views'
        run_cmd 'import_media_files'
        run_cmd 'create_account' "$account_string"

	    echo
        echo
     
        info "Created administrator account for kazoo with credentials:" 
        info "Username: ${green}${admin_user}"
        info "Password: ${green}${admin_password}"
        info "Account:  ${green}${admin_account}"
        info "Realm:    ${green}${admin_realm}"
    fi 
fi 

[[ ${install_list['kazoo-ui']:-} ]] && info "You can access the kazoo-ui by going to: ${green}http://$system_ip_address/kazoo-ui"
 
echo 

info "Installation completed! Welcome to Kazoo!"
clean_exit



