# First, search for files over a certain filesize
# Here, we search for files over 100 Mb
find /srv/db/shards/ -size +100M > big_files.txt

# Open big_files.txt in Emacs
# Now use query-replace-regexp (mine is bound to
# 'C-M-%' or you can 'M-x query-replace-regexp'
# Use /srv/db/shards/.\{17\}/\(.+\)\.[[:digit:]]+\.couch^J
# to match out the db name and <<"\1">> to replace the line
# The final result should look like:
# /srv/db/shards/.\{17\}/\(.+\)\.[[:digit:]]+\.couch^J -> <<"\1">>,

# Note: ^J is the endline, created with 'C-q C-j', in case pasting the ^J
# directly doesn't work

# You should now have the list of dbs in a single line, formatted as Erlang
# binaries.

# Original contents of big_files.txt:
# /srv/db/shards/aaaaaaaa-ffffffff/anonymous_cdrs.1340665082.couch
# /srv/db/shards/aaaaaaaa-ffffffff/account/6c/57/65986087438d16afdee06c0115ed.1340664842.couch

# After running the query-replace-regexp:
# <<"anonymous_cdrs">>,<<"account/6c/57/65986087438d16afdee06c0115ed">>,

# Remove the trailing comma, and wrap the result thusly:
# [couch_compactor_fsm:compact_db(<<"bigcouch@db.host.com">>, Db) || Db <- lists:usort([<<"anonymous_cdrs">>,<<"account/6c/57/65986087438d16afdee06c0115ed">>])].
# Connect to the whistle_apps VM (whistle_apps/conn-to-vm.sh)
# Copy/Paste the code above into the VM
# Here's the quick break down of what's happening (from right to left):
#  lists:usort([...]) takes the list of dbs and sorts it. A side effect is
#    that it also de-duplicates the list (so you'll only compact the db once)
#  Db <- lists:usort([...]) says, foreach Db in the resulting list, do whatever
#    is to the left of ||
#  couch_compactor_fsm:compact_db(<<"bigcouch@db.host.com">>, Db) instructs
#    the compactor to queue up the Db for compaction on this specific BigCouch
#    host.

# You can check compaction progress by issuing:
#   couch_compactor_fsm:status().
# in your whapps VM. The scroll to the top of output to see what Db is currently
# (or just finished) compacting:
# [{node,<<"bigcouch@db.host.com">>}
#  ,{db,<<"account/6c/57/65986087438d16afdee06c0115ed">>}
#  ,{wait_left,6327}
#  ,{queued_jobs,[[{job,{compact_db,<<"bigcouch@db.host.com">>,<<"anonymous_cdrs">>}}
#   ...

# Here we see that the account Db has finished compacting, and we have 6.327 seconds
# left until the compactor moves on to the next Db - anonymous_cdrs

# I like to see the impact of compaction, so I take the Db about to be (or currently)
# being compacted and check the sizes of the shards.

# On db.host.com:
ls -lh /srv/db/shards/*/account/6c/57/65986087438d16afdee06c0115ed*

# This will show .couch and .couch.compact files (if still compacting).

